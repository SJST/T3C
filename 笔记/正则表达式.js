1.单个匹配
	/* 
		\n 匹配换行符
		\r 匹配回车符
		\s 匹配任何空白字符，包括空格、制表符、换页符等等
		\S 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
		\t 匹配一个制表符。等价于 \x09 和 \cI。
		$  匹配输入字符串的结尾位置,是匹配输入字符的结尾位置
		() 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用 优先匹配()内的然后将匹配后的字符作为输入 再次匹配
		* 	匹配前面的子表达式零次或多次
		+ 	匹配前面的子表达式零次或多次,注意必须有一次
		. 	匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。
		[	标记一个中括号表达式的开始。要匹配 [，请使用 \[。
		?	匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。
		^	匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。
		{	标记限定符表达式的开始。要匹配 {，请使用 \{。
		|	指明两项之间的一个选择。要匹配 |，请使用 \|。		
	*/
2.限定符
	/*
		*	匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
		+	匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
		?	匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
		
	*/
3.Python正则
	/*
		1.匹配单个字符
			1.\d 匹配单个数字
				re.match("data\d",data2)
			2.[]  限定符 限定匹配的字符
				re.match("data[12]",data2)
			3.\w 匹配单个字符·
				re.match("data\w",dataW)
			4.\s 匹配空白字符
				re.match("data\s\w",data W)
			5.大写字母为小写字母的非
			
			6. . 匹配所有,单一字符
		2.匹配多个字符
			1.\d{}
				{m,n}:规定了{}前面字符可以有至少m次至多n次
				{m}:规定了{}前面字符必须有m次
			2.?非贪婪模式
			    ?前面的东西可以有 可以没有 有时只可有1个
			3.* 贪婪模式
				*前面的字符可以有1个可以没有可以有多个
			4. .* 匹配所有，
				但是不包括/n
			5. re.S
				re 正则提供了可以匹配\n 让.匹配到反/n
			6.+ 
				匹配前面的字符一次或者多次，但是必须有一个
			
			
	*/